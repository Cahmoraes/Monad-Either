{"version":3,"sources":["../src/either/Either.ts"],"names":["Either_exports","__export","left","right","Left","value","Right"],"mappings":"0FAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,UAAAE,EAAA,UAAAC,IAAA,IAAMC,EAAN,KAAiB,CAEf,YAAYC,EAAU,CACpB,KAAK,MAAQA,CACf,CAEA,QAA6B,CAC3B,MAAO,EACT,CAEA,SAA+B,CAC7B,MAAO,EACT,CACF,EAEMC,EAAN,KAAkB,CAEhB,YAAYD,EAAU,CACpB,KAAK,MAAQA,CACf,CAEA,QAA6B,CAC3B,MAAO,EACT,CAEA,SAA+B,CAC7B,MAAO,EACT,CACF,EAGaH,EAAcA,GAAY,IAAIE,EAAWF,CAAI,EAC7CC,EAAeA,GAAa,IAAIG,EAAYH,CAAK","sourcesContent":["class Left<L, R> {\n  readonly value: L\n  constructor(value: L) {\n    this.value = value\n  }\n\n  isLeft(): this is Left<L, R> {\n    return true\n  }\n\n  isRight(): this is Right<L, R> {\n    return false\n  }\n}\n\nclass Right<L, R> {\n  readonly value: R\n  constructor(value: R) {\n    this.value = value\n  }\n\n  isLeft(): this is Left<L, R> {\n    return false\n  }\n\n  isRight(): this is Right<L, R> {\n    return true\n  }\n}\n\nexport type EitherType<L, R> = Left<L, R> | Right<L, R>\nexport const left = <L, R>(left: L) => new Left<L, R>(left)\nexport const right = <L, R>(right: R) => new Right<L, R>(right)\n"]}